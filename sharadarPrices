
function getNasdaqPrices() {
  const api_key = "YOUR_API_KEY";
  let holidays = [
      "2023-01-01", // New Year's Day
      "2023-01-16", // Martin Luther King Jr. Day
      "2023-02-20", // Presidents' Day
      "2023-05-29", // Memorial Day
      "2023-07-04", // Independence Day
      "2023-09-04", // Labor Day
      "2023-11-23", // Thanksgiving Day
      "2023-12-25"  // Christmas Day
    ]

  function isHoliday(x){
    x = Utilities.formatDate(x, "GMT", "yyyy-MM-dd")
    let holidayId = holidays.indexOf(x)
    if(holidayId == -1){
      Logger.log(x + " NOT Holiday")
      return false
    }
    else{
      Logger.log(x + " IS Holiday")
      return true
    }
  }

function isBusinessDay(x) {
    if (x.getDay() === 0 || x.getDay() === 6) {
      Logger.log(x + " IS weekend")
      return false
    } 
    else {
      Logger.log(x + " IS business day")
      return true
    }
  }
function weekendMoveDate (date){
  while (!isBusinessDay(date)) {
    date.setTime(date.valueOf() - 86400000)
}}
function holidayMoveDate (date){
  while (!!isHoliday(date)) {
    date.setTime(date.valueOf() - 86400000)
    } 
  }
let date = new Date()
let today = new Date(date-(21600000)) //adding time to convert to CST

weekendMoveDate(today)
holidayMoveDate(today)

let yesterday = new Date((today-(86400000))) // subtracting 1day
let fiveDaysAgo = new Date((today-(86400000*5)))
let twentyDaysAgo = new Date((today-(86400000*20)))
let eightyDaysAgo = new Date((today-(86400000*80)))

weekendMoveDate(yesterday)
holidayMoveDate(yesterday)
weekendMoveDate(fiveDaysAgo)
holidayMoveDate(fiveDaysAgo)
weekendMoveDate(twentyDaysAgo)
holidayMoveDate(twentyDaysAgo)

today = Utilities.formatDate(today, "GMT", "yyyy-MM-dd");
yesterday = Utilities.formatDate(yesterday, "GMT", "yyyy-MM-dd");
fiveDaysAgo = Utilities.formatDate(fiveDaysAgo, "GMT", "yyyy-MM-dd");
twentyDaysAgo = Utilities.formatDate(twentyDaysAgo, "GMT", "yyyy-MM-dd");
eightyDaysAgo = Utilities.formatDate(eightyDaysAgo, "GMT", "yyyy-MM-dd");

let columnsTickerClose = "&qopts.columns=ticker,date,close";

function getPriceYesterday(date){
  let url = "https://data.nasdaq.com/api/v3/datatables/SHARADAR/SEP.csv?date=" + date + columnsTickerClose + "&api_key=" + api_key;
  Logger.log(url)
  let response = UrlFetchApp.fetch(url);
  let csv = response.getContentText();
  let data = Utilities.parseCsv(csv);
  let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("prices");
  sheet.getRange(1, 4, data.length, data[0].length).setValues(data);
  }

  function getPriceToday(date){
  let url = "https://data.nasdaq.com/api/v3/datatables/SHARADAR/SEP.csv?date=" + date + columnsTickerClose + "&api_key=" + api_key;
  Logger.log(url)
  let response = UrlFetchApp.fetch(url);
  let csv = response.getContentText();
  let data = Utilities.parseCsv(csv);
  let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("prices");
  sheet.getRange(1, 1, data.length, data[0].length).setValues(data);
  }

function getPriceFiveDaysAgo(date){
  let url = "https://data.nasdaq.com/api/v3/datatables/SHARADAR/SEP.csv?date=" + date + columnsTickerClose + "&api_key=" + api_key;
  Logger.log(url)
  let response = UrlFetchApp.fetch(url);
  let csv = response.getContentText();
  let data = Utilities.parseCsv(csv);
  let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("prices");
  sheet.getRange(1, 7, data.length, data[0].length).setValues(data);
  }

  function getPriceTwentyDaysAgo(date){
    let url = "https://data.nasdaq.com/api/v3/datatables/SHARADAR/SEP.csv?date=" + date + columnsTickerClose + "&api_key=" + api_key;
    Logger.log(url)
    let response = UrlFetchApp.fetch(url);
    let csv = response.getContentText();
    let data = Utilities.parseCsv(csv);
    let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("prices");
    sheet.getRange(1, 10, data.length, data[0].length).setValues(data);
    }

  function getPriceEightyDaysAgo(date){
    let url = "https://data.nasdaq.com/api/v3/datatables/SHARADAR/SEP.csv?date=" + date + columnsTickerClose + "&api_key=" + api_key;
    Logger.log(url)
    let response = UrlFetchApp.fetch(url);
    let csv = response.getContentText();
    let data = Utilities.parseCsv(csv);
    let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("prices");
    sheet.getRange(1, 13, data.length, data[0].length).setValues(data);
    }
getPriceToday(today)
getPriceYesterday(yesterday)
getPriceToday(today)
getPriceFiveDaysAgo(fiveDaysAgo)
getPriceTwentyDaysAgo(twentyDaysAgo)
getPriceEightyDaysAgo(eightyDaysAgo)

}
